openapi: 3.0.0
info:
  title: Valyou
  version: '1.0'
servers:
  - url: 127.0.0.1:8088
tags:
  - name: Journals
  - name: Entries
  - name: Profiles
  - name: Friends
  - name: User
  - name: Account
paths:
  /entry:
    post:
      tags:
        - Entries
      summary: Create an entry
      security:
        - LoggedIn: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entry"
      responses:
        '201':
          description: Entry posted successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Entry"
                required:
                  - content
        '400':
          description: Invalid input
        '401':
          description: Login required
  /entry/{entryid}:
    parameters:
      - name: entryid
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Snowflake"
    get:
      summary: Get a single entry
      tags:
        - Entries
      security:
        - LoggedIn: []
      responses:
        '200':
          description: Entry found and returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entry"
        '401':
          description: Login required
        '404':
          description: Journal not found
    patch:
      summary: Update an entry
      description: Editing content can only be done within 24 hours of the creation of the entry.
      tags:
        - Entries
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entry"
      security:
        - LoggedIn: []
      responses:
        '201':
          description: Entry updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entry"
        '401':
          description: Login required
        '403':
          description: Forbidden
        '404':
          description: Entry not found
  /entry/{entryid}/tags:
    parameters:
      - name: entryid
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Snowflake"
    patch:
      summary: Add tags to an entry
      tags:
        - Entries
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      security:
        - LoggedIn: []
      responses:
        '201':
          description: Entry updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entry"
        '401':
          description: Login required
        '403':
          description: Forbidden
        '404':
          description: Entry not found
  /journal:
    post:
      tags:
        - Journals
      summary: Create new journal
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Journal"
      security:
        - LoggedIn: []
      responses:
        '201':
          description: Journal created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Journal"
        '400':
          description: Invalid input
        '401':
          description: Login required
    get:
      summary: Get a list of journals relavent by the user
      description: Will include default journals as well as user created journals.
      tags:
        - Journals
      security:
        - LoggedIn: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Journal"
        '401':
          description: Login required
  /journal/{journalid}:
    parameters:
      - name: journalid
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Snowflake"
    get:
      tags:
        - Journals
      summary: Get a specific journal
      security:
        - LoggedIn: []
      responses:
        '200':
          description: Journal found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Journal"
        '404':
          description: Journal not found
    patch:
      tags:
        - Journals
      summary: Update a Journal
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Journal"
      security:
        - LoggedIn: []
      responses:
        '201':
          description: Journal updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Journal"
        '400':
          description: Bad request
        '401':
          description: Login required
        '403':
          description: Forbidden
        '404':
          description: Journal not found
  /journal/{journalid}/entries/{method}:
    get:
      summary: Get a list of entries in a journal
      tags:
        - Entries
        - Journals
      parameters:
        - name: journalid
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Snowflake"
        - $ref: "#/components/parameters/Method"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/ID"
      responses:
        '200':
          $ref: "#/components/responses/EntryList"
        '400':
          description: Bad request
        '401':
          description: Login required
        '403':
          description: Forbidden
  /user/timeline/{method}:
    get:
      tags:
        - User
      summary: Get a list of entries created by the user
      parameters:
        - $ref: "#/components/parameters/Method"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/ID"
      security:
        - LoggedIn: []
      responses:
        '200':
          $ref: "#/components/responses/EntryList"
        '400':
          description: Bad request
        '401':
          description: Login required
  /user/feed/{method}:
    get:
      tags:
        - User
      summary: Get a list of entries relavent to the user
      parameters:
        - $ref: "#/components/parameters/Method"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/ID"
      security:
        - LoggedIn: []
      responses:
        '200':
          $ref: "#/components/responses/EntryList"
        '400':
          description: Bad request
        '401':
          description: Login required
  /user/{userid}/profile:
    get:
      summary: Get a user's profile
      tags:
        - Profiles
      security:
        - LoggedIn: []
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Snowflake"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        '400':
          description: Bad request
        '401':
          description: Login required
        '403':
          description: Blocked by user
  /user/self/profile:
    get:
      tags:
        - Profiles
      summary: View the current user's profile
      security:
        - LoggedIn: []
      responses:
        '200':
          description: Found users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Profile"
        '401':
          description: Login required
    patch:
      tags:
        - Profiles
      summary: Edit the user's profile
      security:
        - LoggedIn: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        '200':
          description: Updated
          content:
            appliciation/json:
              schema:
                $ref: "#/components/schemas/Profile"
        '400':
          description: Bad request
        '401':
          description: Login required
  /user/self/profile/set_visibility/{visibility}:
    patch:
      tags:
        - Profiles
      summary: Change the user's profile's visibility
      security:
        - LoggedIn: []
      parameters:
        - name: visibility
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Visibility"
      responses:
        '200':
          description: Updated
        '400':
          description: Bad request
        '401':
          description: Login required
  /user/self/friends:
    get:
      tags:
        - Friends
      summary: Get the current user's friends
      security:
        - LoggedIn: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    with:
                      $ref: "#/components/schemas/Profile"
                    since:
                      type: string
                      format: date-time
        '400':
          description: Bad request
        '401':
          description: Login required
  /user/{userid}/friends:
    parameters:
      - name: userid
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/Snowflake"
    get:
      tags:
        - Friends
      summary: Get a user's friends
      security:
        - LoggedIn: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    with:
                      $ref: "#/components/schemas/Profile"
                    since:
                      type: string
                      format: date-time
        '400':
          description: Bad request
        '401':
          description: Login required
        '403':
          description: Forbidden
    post:
      tags:
        - Friends
      summary: Send a friend request to a user
      security:
        - LoggedIn: []
      responses:
        '204':
          description: OK
        '400':
          description: Bad request
        '401':
          description: Login required
        '403':
          description: Blocked by user
    delete:
      tags:
        - Friends
      summary: Remove a user as a friend
      security:
        - LoggedIn: []
      responses:
        '204':
          description: OK
        '400':
          description: Bad request
        '401':
          description: Login required
        '403':
          description: Blocked by user
  /user/{userid}/block:
    post:
      tags:
        - Friends
      summary: Block a user
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Snowflake"
      security:
        - LoggedIn: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
        '401':
          description: Login required
  /user/self/friends/request:
    get:
      tags:
        - Friends
      summary: Get the user's pending friend requests
      security:
        - LoggedIn: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
        '401':
          description: Login required
  /user/{userid}/friends/request:
    post:
      tags:
        - Friends
      summary: Accept a friend request
      description: Only the recipient can accept a friend request, but either can deny
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Snowflake"
      security:
        - LoggedIn: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
        '401':
          description: Login required
        '403':
          description: Blocked by user
    delete:
      tags:
        - Friends
      summary: Deny a friend request
      description: Only the recipient can accept a friend request, but either can deny
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Snowflake"
      security:
        - LoggedIn: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
        '401':
          description: Login required
        '403':
          description: Blocked by user
  /account/settings:
    get:
      tags:
        - Account
      summary: Get user settings
      security:
        - LoggedIn: []
      responses:
        '200':
          $ref: "#/components/responses/AccountSettings"
        '401':
          description: Login required
    patch:
      tags:
        - Account
      summary: Change user settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Settings"
      security:
        - LoggedIn: []
      responses:
        '204':
          description: Update successful
        '400':
          description: Bad request
        '401':
          description: Login required
  /account:
    post:
      tags:
        - Account
      summary: Create a new account
      requestBody:
        content:
          application/json:
            schema:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
              username:
                $ref: "#/components/schemas/Username"
      responses:
        '204':
          description: Account created
        '400':
          description: Bad request
    get:
      tags:
        - Account
      summary: Get current account details
      security:
        - LoggedIn: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        '401':
          description: Login required
    patch:
      tags:
        - Account
      summary: Edit account details
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
      security:
        - LoggedIn: []
      responses:
        '204':
          description: Account created
        '400':
          description: Bad request
  /account/auth:
    post:
      tags:
        - Account
      summary: Login as a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '204':
          description: Login successful
        '400':
          description: Bad username/password
    delete:
      tags:
        - Account
      summary: Log out
      security:
        - LoggedIn: []
      responses:
        '204':
          description: Logged out
        '401':
          description: Login required
components:
  schemas:
    Snowflake:
      type: string
      description: A globally unique, time sortable id
      example: '1234567891011121314'
      maxLength: 19
      minLength: 19
      pattern: '[0-9]{19}'
    Username:
        type: string
        example: personman123
        pattern: '\S{,32}'
        maxLength: 32
    Discriminator:
      format: stringS
      pattern: '[0-9]{4}'
      maxLength: 4
      minLength: 4
      example: '4312'
    Profile:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/Snowflake"
        username:
          $ref: "#/components/schemas/Username"
        discriminator:
          $ref: "#/components/schemas/Username"
        friends:
          type: boolean
          readOnly: true
        bio:
          type: string
          example: I am a good person!
          maxLength: 500
        summary:
          type: string
          example: I am a person!
          maxLength: 120
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          nullable: true
          readOnly: true
    Account:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/Snowflake"
        email:
          type: string
          format: email
        username:
          $ref: "#/components/schemas/Username"
        discriminator:
          $ref: "#/components/schemas/Discriminator"
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          nullable: true
          readOnly: true
    Settings:
      type: object
      additionalProperties: false
      properties:
        profile_visibility:
          $ref: "#/components/schemas/Visibility"
    Visibility:
      type: string
      enum:
        - public
        - friends
        - private
    Entry:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/Snowflake"
        creator:
          type: boolean
          description: Whether or not the user is the author of this entry
          readOnly: true
        author:
          $ref: "#/components/schemas/Snowflake"
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        modifiedc:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        content:
          type: string
          maxLength: 50000
        significance:
          type: number
          format: float
        tags:
          type: array
          items:
            type: string
        journal:
          allOf:
            - $ref: "#/components/schemas/Snowflake"
          readOnly: false
    Journal:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/Snowflake"
        creator:
          type: boolean
          description: Whether or not the user is the creator of this Journal
          readOnly: true
        owner:
          $ref: "#/components/schemas/Snowflake"
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        title:
          type: string
          maxLength: 32
        description:
          type: string
          maxLength: 240
        color:
          type: integer
          maximum: 47
          minimum: 0
          format: int32
        visibility:
          $ref: "#/components/schemas/Visibility"
      required:
        - title
  responses:
    AccountSettings:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Settings"
    EntryList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            maxLength: 40
            items:
              $ref: "#/components/schemas/Entry"
  parameters:
    ID:
      name: id
      description: The id of the item to get items relative to.
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/Snowflake"
    Limit:
      name: limit
      description: The maximum number of items to get
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 20
        minimum: 1
        maximum: 40
    Method:
      name: method
      description: Where to get the items relative to the given id.
      in: path
      required: true
      schema:
        type: string
        enum:
          - around
          - before
          - after
  securitySchemes:
    LoggedIn:
      type: http
      scheme: bearer
      bearerFormat: JWT